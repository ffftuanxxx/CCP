#include <string.h>
#include <ctype.h>
#include <stdbool.h>

typedef struct {
    char nonTerminal;
    char *productions;
} GrammarRule;

enum {
    S_PRIME = 16, S = 17, F=18, A=19, T=20, C=21, B=24, E=22, I=23, R=25
};

static GrammarRule grammar[] = {
        {'O',"S"},
        {'S', "F ; S"},
        {'S', "C"},
        {'F', "fun id A -> C"},
        {'A', "T id A"},
        {'A', "T id"},
        {'T', "nat"},
        {'T', "bool"},
        {'C', "B ? E : C"},
        {'C', "E"},
        {'E', "( id I )"},
        {'I', "E I"},
        {'I', "E"},
        {'E', "lit + E"},
        {'E', "lit"},
        {'B', "E R E & B"},
        {'B', "E R E"},
        {'R', "<"},
        {'R', "="}
};


static int map[38][26]={
        {0,4,0,0,0,0,0,0,7,0,8,0,0,0,0,0,0,1,2,0,0,3,6,0,5,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,0,0,0},
        {9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0},
        {0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {-9,0,0,0,0,0,0,0,0,0,0,0,0,13,14,-9,0,0,0,0,0,0,0,0,0,12},
        {0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {-14,0,0,0,0,0,-14,-14,-14,-14,-14,16,-14,-14,-14,-14,0,0,0,0,0,0,0,0,0,0},
        {0,4,0,0,0,0,0,0,7,0,8,0,0,0,0,0,0,17,2,0,0,3,6,0,5,0},
        {0,0,0,0,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,18,19,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,7,0,8,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0},
        {0,0,0,0,0,0,0,0,7,0,8,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0},
        {0,0,0,0,0,0,0,0,-17,0,-17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,-18,0,-18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,7,0,8,0,0,0,0,0,0,0,0,0,0,0,25,24,0,0},
        {0,0,0,0,0,0,0,0,7,0,8,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,-16,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,7,-12,8,0,0,0,0,0,0,0,0,0,0,0,25,32,0,0},
        {-13,0,0,0,0,0,-13,-13,-13,-13,-13,0,-13,-13,-13,-13,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,7,0,8,0,0,0,0,0,0,0,0,0,0,33,6,0,5,0},
        {0,0,0,-5,20,21,0,0,0,0,0,0,0,0,0,0,0,0,0,34,19,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,7,0,8,0,0,0,0,0,0,0,0,0,0,35,6,0,5,0},
        {0,0,0,0,0,0,0,0,7,0,8,0,0,0,0,0,0,0,0,0,0,0,37,0,36,0},
        {-10,0,0,0,0,0,-10,-10,-10,-10,-10,0,-10,-10,-10,-10,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,-11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,-4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0,0,0,0,0,13,14,0,0,0,0,0,0,0,0,0,0,12}
};


bool check(char* str1, char* str2);

bool existNa(int val, char* str, int col, int *PP);

int mapCharToNonTerminal(char c);




